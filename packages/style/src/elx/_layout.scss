@use "sass:list";
@use "sass:math";

@mixin flex($dir:null, $a:null, $j:null, $wrap:null) {
	@include _flex(flex, $dir, $a, $j, $wrap);
}

@mixin inline-flex($dir:null, $a:null, $j:null, $wrap:null) {
	@include _flex(inline-flex, $dir, $a, $j, $wrap);
}

@mixin _flex($type, $dir:null, $a:null, $j:null, $wrap:null) {
	display: $type;
	@if $dir != null {
		flex-direction: $dir;
	}
	@if $a != null {
		align-items: $a;
	}
	@if $j != null {
		justify-content: $j;
	}
	@if $wrap != null {
		flex-wrap: if($wrap, wrap, nowrap);
	}
}

@mixin relative($top: null, $right: null, $bottom: null, $left: null) {
	@include _position(relative, ($top $right $bottom $left));
}

@mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
	@include _position(absolute, ($top $right $bottom $left));
}

@mixin fixed($top: null, $right: null, $bottom: null, $left: null) {
	@include _position(fixed, ($top $right $bottom $left));
}

@mixin sticky($top: null, $right: null, $bottom: null, $left: null) {
	@include _position(fixed, ($top $right $bottom $left));
}

@mixin _position(
	$type,
	$positions: (
		$top: null,
		$right: null,
		$bottom: null,
		$left: null
	)
) {
	position: $type;
	$side-props: (top right bottom left);

	@for $i from 1 through 4 {
		$key: list.nth($side-props, $i);
		$val: list.nth($positions, $i);

		@if $val != null {
			#{$key}: $val;
		}
	}
}

@mixin circle($radius) {
	width: $radius * 2;
	height: $radius * 2;
	border-radius: $radius;
}

///
/// Sets an element to responsively maintain an aspect ratio with a
/// pseudo-element child whose height is a factor of the target element's width.
///
/// @param {number} $w The horizontal ratio (unitless)
/// @param {number} $h The vertical ratio (unitless)
/// @param {before|after} $pseudo The pseudo-element to use. Defaults to `before`
///
@mixin aspect-ratio($w, $h, $pseudo:before) {
	&::#{$pseudo} {
		content: "";
		display: block;
		width: 100%;
		height: 0;
		padding-top: math.percentage(math.div($h, $w))
	}
}
