<ng-container
	*ngFor="let p of c.points
		let pi = index
		let isFirst = first
		let isLast = last
		trackBy: trackByIndex"
>
	<!-- Draw the connecting line if it's inferred -->
	<svg:line class="outline"
		*ngIf="isLast && c.closed
			&& (p.x !== c.points[0].x || p.y !== c.points[0].y)
			&& !p.handle_out"
		[attr.x1]="p.x"
		[attr.y1]="p.y"
		[attr.x2]="c.points[0].x"
		[attr.y2]="c.points[0].y"
	/>

	<svg:g class="point-group"
		*ngIf="!c.last?.hidden || !isFirst"
	>
		<ng-container *elxUnwrap="(isFirst || (c.last?.hidden && isLast)) as isFirst">
		<ng-container
			*ngTemplateOutlet="point, context: {
				$implicit: isFirst ? c.points[0] : p,
				contour: c,
				index: isFirst ? 0 : pi,
				first: isFirst
			}"
		></ng-container>
		</ng-container>
	</svg:g>
</ng-container>

<ng-template #point
	let-p
	let-c="contour"
	let-idx="index"
	let-first="first"
>
	<!-- handle in -->
	<ng-container *ngIf="p.handle_in as handle">
		<svg:line class="handle in line"
			[attr.x1]="p.x" [attr.y1]="p.y"
			[attr.x2]="handle.x" [attr.y2]="handle.y"
		/>

		<svg:circle class="handle in"
			[attr.cx]="handle.x"
			[attr.cy]="handle.y"
			[attr.r]="3 * scaleFactor"
		/>
		<svg:circle class="handle in pointer-target"
			[attr.cx]="handle.x"
			[attr.cy]="handle.y"
			[attr.r]="3 * 1.618 * scaleFactor"
			(pointerdown)="onPointerDown(idx, 'handle_in', $event)"
		/>
	</ng-container>

	<!-- handle out -->
	<ng-container *ngIf="p.handle_out as handle">
		<svg:line class="handle out line"
			[attr.x1]="p.x" [attr.y1]="p.y"
			[attr.x2]="handle.x" [attr.y2]="handle.y"
		/>

		<svg:circle class="handle out"
			[attr.cx]="handle.x"
			[attr.cy]="handle.y"
			[attr.r]="3 * scaleFactor"
		/>
		<svg:circle class="handle out pointer-target"
			[attr.cx]="handle.x"
			[attr.cy]="handle.y"
			[attr.r]="3 * 1.618 * scaleFactor"
			(pointerdown)="onPointerDown(idx, 'handle_out', $event)"
		/>
	</ng-container>

	<!-- on-curve point -->
	<ng-container>
		<svg:rect *ngIf="!p.smooth"
			class="point"
			[class.first]="first"
			[attr.x]="p.x - (3.5 * scaleFactor)"
			[attr.y]="p.y - (3.5 * scaleFactor)"
			[attr.width]="7 * scaleFactor"
			[attr.height]="7 * scaleFactor"
		/>
		<svg:rect *ngIf="!p.smooth"
			class="point pointer-target"
			[class.first]="first"
			[attr.x]="p.x - (3.5 * 1.618 * scaleFactor)"
			[attr.y]="p.y - (3.5 * 1.618 * scaleFactor)"
			[attr.width]="7 * 1.618 * scaleFactor"
			[attr.height]="7 * 1.618 * scaleFactor"
			(pointerdown)="onPointerDown(idx, 'coords', $event)"
		/>

		<svg:circle *ngIf="p.smooth"
			class="point smooth"
			[class.first]="first"
			[attr.cx]="p.x"
			[attr.cy]="p.y"
			[attr.r]="4 * scaleFactor"
		/>
		<svg:circle *ngIf="p.smooth"
			class="point smooth pointer-target"
			[class.first]="first"
			[attr.cx]="p.x"
			[attr.cy]="p.y"
			[attr.r]="4 * 1.618 * scaleFactor"
			(pointerdown)="onPointerDown(idx, 'coords', $event)"
		/>
	</ng-container>
</ng-template>

<svg:circle
	*ngFor="let p of _debugPoints
		let i = index"
	[attr.cx]="p.x"
	[attr.cy]="p.y"
	[attr.fill]="
		i == 0 ? 'red' :
		i == 1 ? 'green' :
		i == 2 ? 'blue'
	          : 'magenta'"
	r="6"
/>
